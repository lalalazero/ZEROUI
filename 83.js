(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{149:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.markdown=n.LiveDemo=void 0;var r,a=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};r.get||r.set?Object.defineProperty(n,t,r):n[t]=e[t]}return n.default=e,n}(t(0)),o=((r=t(5))&&r.__esModule,t(3));function l(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],r=!0,a=!1,o=void 0;try{for(var l,u=e[Symbol.iterator]();!(r=(l=u.next()).done)&&(t.push(l.value),!n||t.length!==n);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var c=function(){var e=u((0,a.useState)(""),2),n=e[0],t=e[1],r=u((0,a.useState)([{value:"Tag 1",closeable:!1},{value:"Tag 2",closeable:!0}]),2),c=r[0],s=r[1];return a.default.createElement("div",null,a.default.createElement(o.TextInput,{icon:"plus",placeholder:"New Tag",onPressEnter:function(e){console.log("event",e.target.value);var n={value:e.target.value,closeable:!0};s([].concat(l(c),[n])),t("")},value:n,onChange:function(e,n){return t(n)}}),a.default.createElement("div",{style:{marginTop:10}},c.map(function(e,n){return a.default.createElement(o.Tag,{key:n,closeable:e.closeable,onClose:function(){return function(e){console.log("close");var n=c.filter(function(n){return n!==e});s(n)}(e.value)}},e.value)})))};n.LiveDemo=function(){return a.default.createElement(c,null)};n.markdown={subject:"动态添加和删除",desc:"用数组生成一组标签，可以动态添加和删除",code:"import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Tag, TextInput } from 'zero-ui-react'\n\nconst App = () => {\n    const [input, setInput] = useState('')\n    const [tags, setTags] = useState([\n        {\n            value: 'Tag 1',\n            closeable: false,\n        },\n        {\n            value: 'Tag 2',\n            closeable: true,\n        },\n    ])\n    const handleClose = (value) => {\n        console.log('close')\n        const newTags = tags.filter((t) => t !== value)\n        setTags(newTags)\n    }\n    const addTag = (event) => {\n        console.log('event', event.target.value)\n        const newTag = {\n            value: event.target.value,\n            closeable: true,\n        }\n        setTags([...tags, newTag])\n        setInput('')\n    }\n    return (\n        <div>\n            <TextInput\n                icon=\"plus\"\n                placeholder=\"New Tag\"\n                onPressEnter={addTag}\n                value={input}\n                onChange={(name, v) => setInput(v)}\n            ></TextInput>\n            <div style={{ marginTop: 10 }}>\n                {tags.map((t, idx) => (\n                    <Tag\n                        key={idx}\n                        closeable={t.closeable}\n                        onClose={() => handleClose(t.value)}\n                    >\n                        {t.value}\n                    </Tag>\n                ))}\n            </div>\n        </div>\n    )\n}\n",css:""}}}]);